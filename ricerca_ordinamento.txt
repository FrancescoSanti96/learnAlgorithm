# Algortimo DI RICERCA LINEARE

## ITERATIVO
def linear_search(array, elem, eq = lambda x, y: x == y):
    for i in range(len(array)):
        if eq(array[i],elem):
            return i  
    return -1  

## RICORSIVO
def linear_search_rec(array, x, start=None, to=None, eq = lambda x, y: x == y):
    if start is None or to is None: 
        start = 0
        to = len(array)-1
    if start > to: return -1
    if eq(array[start], x): return start
    return linear_search_rec(array, x, start+1, to, eq)

# ALGORITMO DI RICERCA BINARIA

## ITERATIVO
def binary_search_iter(array, x, start, to, eq = lambda x, y: x == y, less = lambda x, y: x < y):
    while start <= to:
        m = (start + to) // 2
        if eq(array[m], x): return m
        elif less(array[m], x): start = m+1
        else: to = m-1
    return -1

def binary_search(array, x):
    return binary_search_iter(array, x, 0, len(array)-1)

## RICORSIVO
def binary_search_recur(array, x, start, to, eq = lambda x, y: x == y, less = lambda x, y: x < y):
    if to < start: return -1
    if start == to:
        return start if eq(array[start], x)  else -1
    mid = start + (to - start)//2
    print(f"from={start}; to={to}; mid={mid}")
    if eq(array[mid], x): return mid
    elif less(array[mid], x): return binary_search_recur(array, x, mid+1, to)
    else: return binary_search_recur(array, x, start, mid-1)


# ALGORITMO DI ORDINAMENTO 

# SELECTION SORT

def min_index(a, index_from, index_to): 
    min_idx = index_from
    for i in range(index_from+1, index_to):
        if a[i] < a[min_idx]:
            min_idx = i
    return min_idx

def selection_sort(a):
    for i in range(len(a)-1):
        min_idx = min_index(a, i, len(a))
        a[i], a[min_idx] = a[min_idx], a[i]

# INSERTION SORT

def insert_in_order(arr, n, e):
    pos = n
    while pos > 0 and arr[pos-1] > e:
        arr[pos] = arr[pos-1]
        pos -= 1
    arr[pos] = e

def insertion_sort(a):
    for i in range(1,len(a)):
        insert_in_order(a, i, a[i])


# BUBBLE SORT

def bubble_sort(a):
    swap = True
    n = len(a)
    i = 0
    while swap and i < n-1:
        swap = False
        for j in range(n-1-i):
            if a[j] > a[j+1]:
                swap = True
                a[j], a[j+1] = a[j+1], a[j]
        i += 1


# MERGE SORT

def merge(a, b, r):
    i, j, k = 0, 0, 0
    # print(f"merge {a} and {b} into {r}")
    while i < len(a) and j < len(b):
        if a[i] <= b[j]:
            r[k] = a[i]
            i = i + 1
        else:
            r[k] = b[j]
            j = j + 1
        k = k + 1
    for i in range(i,len(a)):
        r[k] = a[i]
        k = k + 1
    for i in range(j,len(b)):
        r[k] = b[i]
        k = k + 1

def merge_sort(a):
    if len(a)<=1: return
    m = len(a)//2
    left = a[:m] # beware: it's a copy
    right = a[m:] # beware: it's a copy
    merge_sort(left)
    merge_sort(right)
    merge(left, right, a)

# QUICK SORT

def partition(a,start,to):
    pivot = a[start]
    k = start+1
    for i in range(start+1,to):
        if a[i] < pivot:
            a[i], a[k] = a[k], a[i]
            k += 1
    a[start] = a[k-1]
    a[k-1] = pivot
    return k-1

# sort array
def quick_sort(array, start=None, to=None):
    start = 0 if start==None else start
    to = len(array) if to==None else to
    if start < to:
        pivot_index = partition(array,start,to)
        quick_sort(array,start,pivot_index)
        quick_sort(array,pivot_index+1,to)
